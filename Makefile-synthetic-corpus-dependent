.PHONY: all
#Report time of each step
#SHELL = ./report_time.sh

#PARAMETROS DE VERDAD
#SL
#TL
#DIRSYNTH
#APERTIUMPAIR
#FILTERFILES
#MOSESDIR
#PREFIX
#LANGUAGEPAIRSOURCEDIR

#FASTALIGNDIR

#SOURCEDICT_FILE
#TARGETDICT_FILE

#CORPUSINDEPENDENTDATADIR

#PAR_TRUECASER_MODEL_SL
#PAR_TRUECASER_MODEL_TL



#LEARNED_RULES

#DIRSYNTH
#ALIGNMENTS
#TRANSFER2LEVEL
#APERTIUMPAIR
#DUPDETERMINED
#FILTERFILES
#EXTRASCRIPTSDIR
#NGRAMORDERSYNTH
#PREFIXFILTERING

PREFIXFILTERING=""
ALIGNMENTS:=no


ifdef LEARNED_RULES
POSTTRANSFERPAR:=--postTransfer
TRANSFER2LEVEL:=no
LEARNEDRULESFLAG:=learned
else
TRANSFER2LEVEL:=yes
POSTTRANSFERPAR:=
LEARNEDRULESFLAG:=
endif
DUPDETERMINED:=dupdetermined

APERTIUMSCRIPTSDIR=./apertium-scripts
DIRDETDICT=$(CORPUSINDEPENDENTDATADIR)/dictionary
APERTIUMBINDIR=$(PREFIX)/bin
MYSCRIPTSDIR:=$(APERTIUMSCRIPTSDIR)
TOKENIZER_SL:=$(MOSESDIR)/scripts/tokenizer/normalize-punctuation.perl | $(MOSESDIR)/scripts/tokenizer/tokenizer.perl -l $(SL)
TOKENIZER_TL:=$(MOSESDIR)/scripts/tokenizer/normalize-punctuation.perl | $(MOSESDIR)/scripts/tokenizer/tokenizer.perl -l $(TL)

#TRUECASESL:=$(MOSESDIR)/scripts/tokenizer/lowercase.perl
#TRUECASETL:=$(MOSESDIR)/scripts/tokenizer/lowercase.perl

TRUECASESL:=$(MOSESDIR)/scripts/recaser/truecase.perl --model $(PAR_TRUECASER_MODEL_SL)
TRUECASETL:=$(MOSESDIR)/scripts/recaser/truecase.perl --model $(PAR_TRUECASER_MODEL_TL)

#/home/vmsanchez/hybrid-thesis/tools/mosesdecoder/scripts/recaser/truecase.perl --model /work2/vmsanchez/hybrid-thesis/recaser-models/$(TL)/default
NGRAMORDERSYNTH=8

#SL_TUNING_TOKLOW:=$(DIRPREPAREDCORPUS)/$(SL)-$(TL)-$(BILCORPUS_NAME)/dev/dev.tok.low.$(SL)
#SL_TEST_TOKLOW:=$(DIRPREPAREDCORPUS)/$(SL)-$(TL)-$(BILCORPUS_NAME)/test/test.tok.low.$(SL)

ifeq ($(TRANSFER2LEVEL),yes)
FINALFILE:=$(DIRSYNTH)/syntheticCorpus2levelplusdetdict.gz
FINALALIGNERINPUT:=$(DIRSYNTH)/syntheticCorpus2levelplusdetdict.nodup
FINALALS:=$(DIRSYNTH)/syntheticCorpus2levelplusdetdict.als
else
FINALFILE:=$(DIRSYNTH)/syntheticcorpusplusdetdict.gz
FINALALIGNERINPUT:=$(DIRSYNTH)/syntheticcorpusplusdetdict.nodup
FINALALS:=$(DIRSYNTH)/syntheticcorpusplusdetdict.als
endif

ifeq ($(ALIGNMENTS),yes)
ifeq ($(TRANSFER2LEVEL),yes)
all: $(DIRSYNTH)/moses-model/model/phrase-table.gz $(DIRSYNTH)/syntheticCorpus.$(SL) $(DIRSYNTH)/syntheticCorpus.$(TL) $(DIRSYNTH)/syntheticcorpusplusdetdict.$(SL) $(DIRSYNTH)/syntheticcorpusplusdetdict.$(TL) $(DIRSYNTH)/syntheticCorpus2levelplusdetdict.$(SL) $(DIRSYNTH)/syntheticCorpus2levelplusdetdict.$(TL) $(DIRSYNTH)/syntheticCorpus.als  $(DIRSYNTH)/syntheticCorpus2levelplus1level.$(SL) $(DIRSYNTH)/syntheticCorpus2levelplus1level.$(TL) $(DIRSYNTH)/syntheticCorpus2levelplus1level.als $(DIRSYNTH)/syntheticCorpus2levelplusdetdict.gz  $(DIRSYNTH)/syntheticcorpusplusdetdict.als $(DIRSYNTH)/syntheticCorpus2levelplusdetdict.als # $(DIRDETDICTNORULES)/dictcorpus.$(SL)
else
all: $(DIRSYNTH)/moses-model/model/phrase-table.gz $(DIRSYNTH)/syntheticCorpus.nodup.$(SL) $(DIRSYNTH)/syntheticCorpus.nodup.$(TL) $(DIRSYNTH)/syntheticCorpus.nodup.als $(DIRSYNTH)/syntheticcorpusplusdetdict.$(SL) $(DIRSYNTH)/syntheticcorpusplusdetdict.$(TL) $(DIRSYNTH)/syntheticcorpusplusdetdict.gz  $(DIRSYNTH)/syntheticcorpusplusdetdict.als #$(DIRDETDICTNORULES)/dictcorpus.$(SL)
endif
else
ifeq ($(TRANSFER2LEVEL),yes)
all: $(DIRSYNTH)/moses-model/model/phrase-table.gz $(DIRSYNTH)/syntheticCorpus.$(SL) $(DIRSYNTH)/syntheticCorpus.$(TL) $(DIRSYNTH)/syntheticcorpusplusdetdict.$(SL) $(DIRSYNTH)/syntheticcorpusplusdetdict.$(TL) $(DIRSYNTH)/syntheticCorpus2levelplusdetdict.$(SL) $(DIRSYNTH)/syntheticCorpus2levelplusdetdict.$(TL) $(DIRSYNTH)/syntheticCorpus2levelplus1level.$(SL) $(DIRSYNTH)/syntheticCorpus2levelplus1level.$(TL) $(DIRSYNTH)/syntheticCorpus2levelplusdetdict.gz
else
all: $(DIRSYNTH)/moses-model/model/phrase-table.gz $(DIRSYNTH)/syntheticCorpus.nodup.$(SL) $(DIRSYNTH)/syntheticCorpus.nodup.$(TL) $(DIRSYNTH)/syntheticcorpusplusdetdict.$(SL) $(DIRSYNTH)/syntheticcorpusplusdetdict.$(TL) $(DIRSYNTH)/syntheticcorpusplusdetdict.gz
endif
endif

ifeq ($(TRANSFER2LEVEL),yes)
TARGETFIELDS=6
else
TARGETFIELDS=4
endif


ifeq ($(ENABLE_SGM),yes)
CLEANTAGSCOMMAND:=perl -ne 'print $$1."\n" if /<seg[^>]+>\s*(.*\S)\s*<.seg>/i;'
else
CLEANTAGSCOMMAND:=cat -
endif

$(DIRSYNTH)/filterNGrams: $(FILTERFILES)
	@echo "Extracting ngrams from test and tuning"
	@echo "----------------------"
	rm -Rf $(DIRSYNTH)/lineNGrams
	mkdir -p $(DIRSYNTH)/lineNGrams
	cat $? | $(CLEANTAGSCOMMAND)  |  $(APERTIUMBINDIR)/apertium $(SL)-$(SL)_lex_pretransfer_to_$(TL) | python $(MYSCRIPTSDIR)/extractLexicalFormsSynthetic.py -m $(DIRSYNTH)/lineNGrams/ -n $(NGRAMORDERSYNTH) | grep -vF '*' | grep -vF 'NULL' | LC_ALL=C sort -u  >$(DIRSYNTH)/filterNGrams
#	cat $? | $(CLEANTAGSCOMMAND) | $(TOKENIZER) -l $(SL) |  $(APERTIUMBINDIR)/apertium $(SL)-$(SL)_lex_pretransfer_to_$(TL) | python $(MYSCRIPTSDIR)/extractLexicalFormsSynthetic.py -m $(DIRSYNTH)/lineNGrams/ -n $(NGRAMORDERSYNTH) | LC_ALL=C sort -T $(TMPDIR) | uniq >$(DIRSYNTH)/filterNGrams


$(DIRSYNTH)/filteredLexicalForms: $(CORPUSINDEPENDENTDATADIR)/lexicalForms $(DIRSYNTH)/filterNGrams
	@echo "Filtering lexical forms"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/filterLexicalForms.py $(DIRSYNTH)/filterNGrams $(PREFIXFILTERING) <$(CORPUSINDEPENDENTDATADIR)/lexicalForms >$@

$(DIRSYNTH)/filteredSplitwords: $(CORPUSINDEPENDENTDATADIR)/splittwords $(DIRSYNTH)/filterNGrams
	@echo "Filtering split words"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/filterSplitWords.py $(DIRSYNTH)/filterNGrams <$(CORPUSINDEPENDENTDATADIR)/splittwords >$@

ifeq ($(TRANSFER2LEVEL),yes)
TRULESFILE=$(LANGUAGEPAIRSOURCEDIR)/apertium-$(APERTIUMPAIR).$(SL)-$(TL).t1x
TRULES2LEVELFILE=$(LANGUAGEPAIRSOURCEDIR)/apertium-$(APERTIUMPAIR).$(SL)-$(TL).t2x
else
ifdef LEARNED_RULES
TRULESFILE:=$(LEARNED_RULES)
else
TRULESFILE=$(LANGUAGEPAIRSOURCEDIR)/apertium-$(APERTIUMPAIR).trules-$(SL)-$(TL).xml
endif
endif

$(DIRSYNTH)/newSourcePhrasesPre: $(DIRSYNTH)/filteredLexicalForms $(TRULESFILE) $(DIRSYNTH)/filterNGrams
	@echo "Generating source phrases which match t1x rule"
	@echo "----------------------"
	java -Xmx4096M -jar $(MYSCRIPTSDIR)/ApertiumPhraseGenerator/target/ApertiumPhraseGenerator-1.0-SNAPSHOT-jar-with-dependencies.jar --lexforms $(DIRSYNTH)/filteredLexicalForms --generate --rules $(TRULESFILE) --trie $(DIRSYNTH)/filterNGrams --ngramOrder $(NGRAMORDERSYNTH) >$@ 2> $(DIRSYNTH)/generateNewSourcePhrasesPre.log

$(DIRSYNTH)/newSourcePhrasesLex: $(DIRSYNTH)/newSourcePhrasesPre $(DIRSYNTH)/filteredSplitwords
	@echo "Applying reverse pretransfer to synthetic t1x phrases"
	@echo "----------------------"
ifeq ($(ALIGNMENTS),yes)
	cat $(DIRSYNTH)/newSourcePhrasesPre | python $(MYSCRIPTSDIR)/reverseAdditionalTransferOperations.py -s $(SL) -t $(TL) -d | java -Xmx4096M -jar $(MYSCRIPTSDIR)/ApertiumPhraseGenerator/target/ApertiumPhraseGenerator-1.0-SNAPSHOT-jar-with-dependencies.jar --pretransfer_reverse --split_words $(DIRSYNTH)/filteredSplitwords  | sed -r "s_\^([^#<]+)#([^<]+)((<[^>]+>)+)_^\1\3#\2_g"  >$@
else
	cat $(DIRSYNTH)/newSourcePhrasesPre | python $(MYSCRIPTSDIR)/reverseAdditionalTransferOperations.py -s $(SL) -t $(TL) | java -Xmx4096M -jar $(MYSCRIPTSDIR)/ApertiumPhraseGenerator/target/ApertiumPhraseGenerator-1.0-SNAPSHOT-jar-with-dependencies.jar --pretransfer_reverse --split_words $(DIRSYNTH)/filteredSplitwords --no_alignments | sed -r "s_\^([^#<]+)#([^<]+)((<[^>]+>)+)_^\1\3#\2_g"  >$@
endif


#sed -r 's:\[sep_word_vmsanchez_s\]([^/|]+)/[^[|]+(\[sep_word_vmsanchez_e\]|$$|(\|)):\1 \3:g' | sed -r 's:\[sep_word_vmsanchez_[se]\]::g' |

$(DIRSYNTH)/syntheticCorpus.$(SL).a: $(DIRSYNTH)/newSourcePhrasesLex $(DIRSYNTH)/dupSrcLines
	@echo "Generating src sup forms t1x"
	@echo "----------------------"
ifeq ($(ALIGNMENTS),yes)
ifeq ($(TRANSFER2LEVEL),yes)
	cat $(DIRSYNTH)/newSourcePhrasesLex | python $(MYSCRIPTSDIR)/generateSourceFromLex.py -s $(SL) -t $(TL) -d -m $(CORPUSINDEPENDENTDATADIR)/lemmas-src/multiwords | python $(MYSCRIPTSDIR)/duplicateLines.py -d $(DIRSYNTH)/dupSrcLines | python $(MYSCRIPTSDIR)/postProcessSource.py $(DIRSYNTH)/dupTargetLines| sed -r 's:[ ]+: :g'  | python $(MYSCRIPTSDIR)/tokenizeWithALignments.py -l $(SL) -p "$(TOKENIZER)"  > $@
else
	cat $(DIRSYNTH)/newSourcePhrasesLex | python $(MYSCRIPTSDIR)/generateSourceFromLex.py -s $(SL) -t $(TL) -d -m $(CORPUSINDEPENDENTDATADIR)/lemmas-src/multiwords | python $(MYSCRIPTSDIR)/postProcessSource.py $(DIRSYNTH)/dupTargetLines | sed -r 's:[ ]+: :g' | python $(MYSCRIPTSDIR)/tokenizeWithALignments.py -l $(SL) -p "$(TOKENIZER)" > $@
endif
else
ifeq ($(TRANSFER2LEVEL),yes)
	cat $(DIRSYNTH)/newSourcePhrasesLex | python $(MYSCRIPTSDIR)/generateSourceFromLex.py -s $(SL) -t $(TL) |  python $(MYSCRIPTSDIR)/duplicateLines.py -d $(DIRSYNTH)/dupSrcLines | python $(MYSCRIPTSDIR)/postProcessSource.py $(DIRSYNTH)/dupTargetLines noals | sed -r 's:[ ]+: :g' | $(TOKENIZER_SL) > $@
else
	cat $(DIRSYNTH)/newSourcePhrasesLex | python $(MYSCRIPTSDIR)/generateSourceFromLex.py -s $(SL) -t $(TL) | python $(MYSCRIPTSDIR)/postProcessSource.py $(DIRSYNTH)/dupTargetLines noals | sed -r 's:[ ]+: :g' |  $(TOKENIZER_SL) > $@
endif
endif

$(DIRSYNTH)/syntheticCorpus.$(TL).aprev $(DIRSYNTH)/dupSrcLines $(DIRSYNTH)/syntheticCorpus.t1x: $(DIRSYNTH)/newSourcePhrasesPre $(CORPUSINDEPENDENTDATADIR)/lemmas-target/multiwords
	@echo "Generating target sup forms t1x"
	@echo "----------------------"
ifeq ($(ALIGNMENTS),yes)
ifeq ($(TRANSFER2LEVEL),yes)
	cat $(DIRSYNTH)/newSourcePhrasesPre | python $(MYSCRIPTSDIR)/generateTargetFromLexPre.py -s $(SL) -t $(TL) -b $(DIRSYNTH)/dupSrcLines -o $(DIRSYNTH)/syntheticCorpus.t1x --debug --mwlexicalforms $(CORPUSINDEPENDENTDATADIR)/lemmas-target/multiwords  > $(DIRSYNTH)/syntheticCorpus.$(TL).aprev
else
	cat $(DIRSYNTH)/newSourcePhrasesPre | python $(MYSCRIPTSDIR)/generateTargetFromLexPre.py -s $(SL) -t $(TL) --debug --mwlexicalforms $(CORPUSINDEPENDENTDATADIR)/lemmas-target/multiwords $(POSTTRANSFERPAR)  > $(DIRSYNTH)/syntheticCorpus.$(TL).aprev
endif
else
ifeq ($(TRANSFER2LEVEL),yes)
	cat $(DIRSYNTH)/newSourcePhrasesPre | python $(MYSCRIPTSDIR)/generateTargetFromLexPre.py -s $(SL) -t $(TL) -b $(DIRSYNTH)/dupSrcLines -o $(DIRSYNTH)/syntheticCorpus.t1x  > $(DIRSYNTH)/syntheticCorpus.$(TL).aprev
else
	cat $(DIRSYNTH)/newSourcePhrasesPre | python $(MYSCRIPTSDIR)/generateTargetFromLexPre.py -s $(SL) -t $(TL) $(POSTTRANSFERPAR)  > $(DIRSYNTH)/syntheticCorpus.$(TL).aprev
endif
endif

$(DIRSYNTH)/syntheticCorpus.$(TL).a: $(DIRSYNTH)/syntheticCorpus.$(TL).aprev $(DIRSYNTH)/syntheticCorpus.$(SL).a
	@echo "Generating target sup forms t1x (tokenized)"
	@echo "----------------------"
ifeq ($(ALIGNMENTS),yes)
	cat $(DIRSYNTH)/syntheticCorpus.$(TL).aprev | python $(MYSCRIPTSDIR)/duplicateLines.py -d $(DIRSYNTH)/dupTargetLines | sed -r 's:[ ]+: :g' | python $(MYSCRIPTSDIR)/tokenizeWithALignments.py -l $(TL) -p "$(TOKENIZER)" -e > $@
else
	cat $(DIRSYNTH)/syntheticCorpus.$(TL).aprev | python $(MYSCRIPTSDIR)/duplicateLines.py -d $(DIRSYNTH)/dupTargetLines | sed -r 's:[ ]+: :g' | $(TOKENIZER_TL) > $@
endif


$(DIRSYNTH)/syntheticCorpus.$(SL): $(DIRSYNTH)/syntheticCorpus.$(SL).a
	@echo "Generating final source sup forms t1x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 1 < $? | $(TRUECASESL) | sed -r "s/[ ]+/ /g" > $@

$(DIRSYNTH)/syntheticCorpus.$(TL): $(DIRSYNTH)/syntheticCorpus.$(TL).a
	@echo "Generating final target sup forms t1x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 1 < $? | $(TRUECASETL) | sed -r "s/[ ]+/ /g" > $@

ifeq ($(ALIGNMENTS),yes)
$(DIRSYNTH)/syntheticCorpus.als: $(DIRSYNTH)/syntheticCorpus.$(SL).a $(DIRSYNTH)/syntheticCorpus.$(TL).a
	@echo "Generating final alignments t1x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/pastePhraseTable.py $(DIRSYNTH)/syntheticCorpus.$(SL).a $(DIRSYNTH)/syntheticCorpus.$(TL).a | python $(MYSCRIPTSDIR)/joinAlignments.py -s 4 -t $(TARGETFIELDS) > $@
endif

ifeq ($(ALIGNMENTS),yes)
DEPSSYNTHNODUP=$(DIRSYNTH)/syntheticCorpus.$(SL) $(DIRSYNTH)/syntheticCorpus.$(TL) $(DIRSYNTH)/syntheticCorpus.als
else
DEPSSYNTHNODUP=$(DIRSYNTH)/syntheticCorpus.$(SL) $(DIRSYNTH)/syntheticCorpus.$(TL)
endif
$(DIRSYNTH)/syntheticCorpus.nodup: $(DEPSSYNTHNODUP)
	@echo "Removing dups from syntheticCorpus"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/pastePhraseTable.py $? | LC_ALL=C sort -u  | python $(MYSCRIPTSDIR)/filterEmptyPhrases.py -f 1,2 > $@

$(DIRSYNTH)/syntheticCorpus.nodup.$(SL): $(DIRSYNTH)/syntheticCorpus.nodup
	@echo "Generating final source sup forms t1x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 1 < $? > $@

$(DIRSYNTH)/syntheticCorpus.nodup.$(TL): $(DIRSYNTH)/syntheticCorpus.nodup
	@echo "Generating final target sup forms t1x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 2 < $? > $@

ifeq ($(ALIGNMENTS),yes)
$(DIRSYNTH)/syntheticCorpus.nodup.als: $(DIRSYNTH)/syntheticCorpus.nodup
	@echo "Generating final alignments t1x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 3 < $? > $@
endif


$(DIRSYNTH)/syntheticCorpus.t1x.ready: $(DIRSYNTH)/syntheticCorpus.t1x
	@echo "Preparing chunks"
	@echo "----------------------"
ifeq ($(ALIGNMENTS),yes)
	cat $? | sed -r "s/\^punt<sent>\{\^.<sent>\\$$\}\\$$ \|\|\|/ |||/" | python $(MYSCRIPTSDIR)/removeSentFromDebugInfo.py > $@
#sed -r "s/\{transfer-rule sent --\\\\\^\.<sent>\\\\\\$$ -- \\\\\^0-\.<sent>\\\\\\$$ transfer-rule\}[ ]*$$//"
else
	cat $? | sed -r "s/\^punt<sent>\{\^.<sent>\\$$\}\\$$\[(sep_sentence_vmsanchez)?\]//" | sed -r "\$$s/\^punt<sent>\{\^.<sent>\\$$\}\\$$//" | sed -r 's:\^sent<SENT>\{\^.<sent>\$$\}\$$\[(sep_sentence_vmsanchez)?::I' >$@
endif

$(DIRSYNTH)/syntheticCorpus.t1xplussource: $(DIRSYNTH)/newSourcePhrasesPre  $(DIRSYNTH)/syntheticCorpus.t1x.ready
	@echo "Adding src lexical forms to chunks"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/pastePhraseTable.py $? | LC_ALL=C  sort -u >$@

$(DIRSYNTH)/syntheticCorpus.pret2x.gz: $(DIRSYNTH)/syntheticCorpus.t1xplussource $(DIRSYNTH)/filterNGrams
	@echo "Generating source phrases which match t2x rule"
	@echo "----------------------"
ifeq ($(ALIGNMENTS),yes)
	java -Xmx8096M -jar $(MYSCRIPTSDIR)/ApertiumPhraseGenerator/target/ApertiumPhraseGenerator-1.0-SNAPSHOT-jar-with-dependencies.jar --lexforms $(DIRSYNTH)/syntheticCorpus.t1xplussource --generate2level --rules $(TRULES2LEVELFILE) --trie $(DIRSYNTH)/lineNGrams/ --multipleNgrams `ls -1 $(DIRSYNTH)/lineNGrams/ | wc -l` --ngramOrder $(NGRAMORDERSYNTH) 2> $(DIRSYNTH)/generateSyntheticCorpusPret2x.log | LC_ALL=C sort -u | gzip  >$@
else
	java -Xmx8096M -jar $(MYSCRIPTSDIR)/ApertiumPhraseGenerator/target/ApertiumPhraseGenerator-1.0-SNAPSHOT-jar-with-dependencies.jar --lexforms $(DIRSYNTH)/syntheticCorpus.t1xplussource --generate2level --rules $(TRULES2LEVELFILE) --no_alignments --trie $(DIRSYNTH)/lineNGrams/ --multipleNgrams `ls -1 $(DIRSYNTH)/lineNGrams/ | wc -l` --ngramOrder $(NGRAMORDERSYNTH) 2> $(DIRSYNTH)/generateSyntheticCorpusPret2x.log | LC_ALL=C sort -u | gzip  >$@
endif

$(DIRSYNTH)/newSourcePhrasesLex2level: $(DIRSYNTH)/syntheticCorpus.pret2x.gz $(DIRSYNTH)/filteredSplitwords
	@echo "Applying reverse pretransfer to synthetic t2x phrases"
	@echo "----------------------"
	zcat $(DIRSYNTH)/syntheticCorpus.pret2x.gz | python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 1  >$(DIRSYNTH)/newSourcePhrasesPre2level
ifeq ($(ALIGNMENTS),yes)
	cat $(DIRSYNTH)/newSourcePhrasesPre2level | python $(MYSCRIPTSDIR)/reverseAdditionalTransferOperations.py -s $(SL) -t $(TL) -d  | java -Xmx4096M -jar $(MYSCRIPTSDIR)/ApertiumPhraseGenerator/target/ApertiumPhraseGenerator-1.0-SNAPSHOT-jar-with-dependencies.jar --pretransfer_reverse --split_words $(DIRSYNTH)/filteredSplitwords  | sed -r "s_\^([^#<]+)#([^<]+)((<[^>]+>)+)_^\1\3#\2_g"  >$@
else
	cat $(DIRSYNTH)/newSourcePhrasesPre2level | python $(MYSCRIPTSDIR)/reverseAdditionalTransferOperations.py -s $(SL) -t $(TL)  | java -Xmx4096M -jar $(MYSCRIPTSDIR)/ApertiumPhraseGenerator/target/ApertiumPhraseGenerator-1.0-SNAPSHOT-jar-with-dependencies.jar --pretransfer_reverse --split_words $(DIRSYNTH)/filteredSplitwords --no_alignments  | sed -r "s_\^([^#<]+)#([^<]+)((<[^>]+>)+)_^\1\3#\2_g"  >$@
endif

# sed -r 's:\[sep_word_vmsanchez_s\]([^/|]+)/[^[|]+(\[sep_word_vmsanchez_e\]|$$|(\|)):\1 \3:g' | sed -r 's:\[sep_word_vmsanchez_[se]\]::g'
$(DIRSYNTH)/syntheticCorpus2level.$(SL).a $(DIRSYNTH)/dupTargetLines2level: $(DIRSYNTH)/newSourcePhrasesLex2level
	@echo "Generating source sup forms t2x"
	@echo "----------------------"
ifeq ($(ALIGNMENTS),yes)
	cat $(DIRSYNTH)/newSourcePhrasesLex2level | python $(MYSCRIPTSDIR)/generateSourceFromLex.py -s $(SL) -t $(TL) --debug --mwlexicalforms $(CORPUSINDEPENDENTDATADIR)/lemmas-src/multiwords | python $(MYSCRIPTSDIR)/postProcessSource.py $(DIRSYNTH)/dupTargetLines2level noals | sed -r 's:[ ]+: :g' | python $(MYSCRIPTSDIR)/tokenizeWithALignments.py -l $(SL) -p "$(TOKENIZER)"  > $@
else
	cat $(DIRSYNTH)/newSourcePhrasesLex2level | python $(MYSCRIPTSDIR)/generateSourceFromLex.py -s $(SL) -t $(TL) | python $(MYSCRIPTSDIR)/postProcessSource.py $(DIRSYNTH)/dupTargetLines2level noals | sed -r 's:[ ]+: :g' | $(TOKENIZER_SL)   > $@
endif

$(DIRSYNTH)/syntheticCorpus2level.$(TL).a $(DIRSYNTH)/dupSrcLines2level: $(DIRSYNTH)/syntheticCorpus.pret2x.gz $(CORPUSINDEPENDENTDATADIR)/lemmas-target/multiwords $(DIRSYNTH)/dupTargetLines2level
	@echo "Generating target sup forms t2x"
	@echo "----------------------"
ifeq ($(ALIGNMENTS),yes)
	zcat $(DIRSYNTH)/syntheticCorpus.pret2x.gz | python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 2,3 | python $(MYSCRIPTSDIR)/duplicateLines.py -d $(DIRSYNTH)/dupTargetLines2level | python $(MYSCRIPTSDIR)/generateTargetFromLexPre.py -s $(SL) -t $(TL) -i --debug --mwlexicalforms $(CORPUSINDEPENDENTDATADIR)/lemmas-target/multiwords -b $(DIRSYNTH)/dupSrcLines2level | sed -r 's:[ ]+: :g' | python $(MYSCRIPTSDIR)/tokenizeWithALignments.py -l $(TL) -p "$(TOKENIZER)" -e   > $(DIRSYNTH)/syntheticCorpus2level.$(TL).a
else
	zcat $(DIRSYNTH)/syntheticCorpus.pret2x.gz | python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 2 | python $(MYSCRIPTSDIR)/generateTargetFromLexPre.py -s $(SL) -t $(TL) -i -b $(DIRSYNTH)/dupSrcLines2level  | python $(MYSCRIPTSDIR)/duplicateLines.py -d $(DIRSYNTH)/dupTargetLines2level | sed -r 's:[ ]+: :g' | $(TOKENIZER_TL) > $(DIRSYNTH)/syntheticCorpus2level.$(TL).a
endif

$(DIRSYNTH)/syntheticCorpus2level.$(SL): $(DIRSYNTH)/syntheticCorpus2level.$(SL).a $(DIRSYNTH)/dupSrcLines2level
	@echo "Generating final source sup forms t2x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 1 < $? | $(TRUECASESL) | sed -r "s/[ ]+/ /g" | python $(MYSCRIPTSDIR)/duplicateLines.py -d $(DIRSYNTH)/dupSrcLines2level > $@

$(DIRSYNTH)/syntheticCorpus2level.$(TL): $(DIRSYNTH)/syntheticCorpus2level.$(TL).a
	@echo "Generating final target sup forms t2x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 1 < $? | $(TRUECASETL) | sed -r "s/[ ]+/ /g" > $@

ifeq ($(ALIGNMENTS),yes)
$(DIRSYNTH)/syntheticCorpus2level.als: $(DIRSYNTH)/syntheticCorpus2level.$(SL).a $(DIRSYNTH)/syntheticCorpus2level.$(TL).a $(DIRSYNTH)/dupSrcLines2level
	@echo "Generating final alignments t2x"
	@echo "----------------------"
	cat $(DIRSYNTH)/syntheticCorpus2level.$(SL).a | python $(MYSCRIPTSDIR)/duplicateLines.py -d $(DIRSYNTH)/dupSrcLines2level > $(DIRSYNTH)/syntheticCorpus2level.$(SL).a.duplicated
	python $(MYSCRIPTSDIR)/pastePhraseTable.py $(DIRSYNTH)/syntheticCorpus2level.$(SL).a.duplicated $(DIRSYNTH)/syntheticCorpus2level.$(TL).a | python $(MYSCRIPTSDIR)/joinAlignments.py -s 4 -t $(TARGETFIELDS) > $@
endif


ifeq ($(ALIGNMENTS),yes)
$(DIRSYNTH)/syntheticcorpusplusdetdict.all: $(DIRSYNTH)/syntheticCorpus.$(SL) $(DIRSYNTH)/syntheticCorpus.$(TL) $(DIRSYNTH)/syntheticCorpus.als $(DIRDETDICT)/dictcorpus.$(SL) $(DIRDETDICT)/dictcorpus.$(TL)
	@echo "Joining dictionary and synthetic t1x"
	@echo "----------------------"
	rm -f $@
	python $(MYSCRIPTSDIR)/pastePhraseTable.py  $(DIRSYNTH)/syntheticCorpus.$(SL) $(DIRSYNTH)/syntheticCorpus.$(TL) $(DIRSYNTH)/syntheticCorpus.als  >> $@
	python $(MYSCRIPTSDIR)/pastePhraseTable.py  $(DIRDETDICT)/dictcorpus.$(SL) $(DIRDETDICT)/dictcorpus.$(TL) $(DIRDETDICT)/dictcorpus.als  >> $@
else
$(DIRSYNTH)/syntheticcorpusplusdetdict.all: $(DIRSYNTH)/syntheticCorpus.$(SL) $(DIRSYNTH)/syntheticCorpus.$(TL) $(DIRDETDICT)/dictcorpus.$(SL) $(DIRDETDICT)/dictcorpus.$(TL)
	@echo "Joining dictionary and synthetic t1x"
	@echo "----------------------"
	rm -f $@
	python $(MYSCRIPTSDIR)/pastePhraseTable.py  $(DIRSYNTH)/syntheticCorpus.$(SL) $(DIRSYNTH)/syntheticCorpus.$(TL)  >> $@
	python $(MYSCRIPTSDIR)/pastePhraseTable.py  $(DIRDETDICT)/dictcorpus.$(SL) $(DIRDETDICT)/dictcorpus.$(TL) >> $@
endif

$(DIRSYNTH)/syntheticcorpusplusdetdict.nodup: $(DIRSYNTH)/syntheticcorpusplusdetdict.all
	@echo "Removing dups from joint dictionary and synthetic t1x"
	@echo "----------------------"
	cat $? | LC_ALL=C sort -u | python $(MYSCRIPTSDIR)/filterEmptyPhrases.py -f 1,2 | grep -F -v -i 'rejectcurrentrulevmsanchez' > $@

$(DIRSYNTH)/syntheticcorpusplusdetdict.$(SL): $(DIRSYNTH)/syntheticcorpusplusdetdict.nodup
	@echo "Generating final source dict+synth t1x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 1 <$? >$@

$(DIRSYNTH)/syntheticcorpusplusdetdict.$(TL): $(DIRSYNTH)/syntheticcorpusplusdetdict.nodup
	@echo "Generating final target dict+synth t1x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 2 <$? >$@

$(DIRSYNTH)/syntheticcorpusplusdetdict.gz: $(DIRSYNTH)/syntheticcorpusplusdetdict.nodup
	@echo "Generating final synth t1x plus dict"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 1,2 < $? | sed -r "s/$$/ |||/"  | gzip > $@

ifeq ($(ALIGNMENTS),yes)
$(DIRSYNTH)/syntheticcorpusplusdetdict.als: $(DIRSYNTH)/syntheticcorpusplusdetdict.nodup
	@echo "Generating final alignments dict+synth t1x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 3 <$? >$@
endif

ifeq ($(ALIGNMENTS),yes)
$(DIRSYNTH)/syntheticCorpus2levelplusdetdict.nodup: $(DIRSYNTH)/syntheticcorpusplusdetdict.nodup $(DIRSYNTH)/syntheticCorpus2level.$(SL) $(DIRSYNTH)/syntheticCorpus2level.$(TL) $(DIRSYNTH)/syntheticCorpus2level.als
	@echo "Joining dictionary synthetic t1x and t2x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/pastePhraseTable.py $(DIRSYNTH)/syntheticCorpus2level.$(SL) $(DIRSYNTH)/syntheticCorpus2level.$(TL)  $(DIRSYNTH)/syntheticCorpus2level.als | cat - $(DIRSYNTH)/syntheticcorpusplusdetdict.nodup | LC_ALL=C sort -u | python $(MYSCRIPTSDIR)/filterEmptyPhrases.py -f 1,2 > $@
else
$(DIRSYNTH)/syntheticCorpus2levelplusdetdict.nodup: $(DIRSYNTH)/syntheticcorpusplusdetdict.nodup $(DIRSYNTH)/syntheticCorpus2level.$(SL) $(DIRSYNTH)/syntheticCorpus2level.$(TL)
	@echo "Joining dictionary synthetic t1x and t2x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/pastePhraseTable.py $(DIRSYNTH)/syntheticCorpus2level.$(SL) $(DIRSYNTH)/syntheticCorpus2level.$(TL) | cat - $(DIRSYNTH)/syntheticcorpusplusdetdict.nodup | LC_ALL=C sort -u | python $(MYSCRIPTSDIR)/filterEmptyPhrases.py -f 1,2 > $@
endif

$(DIRSYNTH)/syntheticCorpus2levelplusdetdict.$(SL): $(DIRSYNTH)/syntheticCorpus2levelplusdetdict.nodup
	@echo "Generating final source dict+synth t1x+synth t2x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 1 <$? >$@

$(DIRSYNTH)/syntheticCorpus2levelplusdetdict.$(TL): $(DIRSYNTH)/syntheticCorpus2levelplusdetdict.nodup
	@echo "Generating final target dict+synth t1x+synth t2x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 2 <$? >$@

$(DIRSYNTH)/syntheticCorpus2levelplusdetdict.gz: $(DIRSYNTH)/syntheticCorpus2levelplusdetdict.nodup
	@echo "Generating final synth t1x+synth t2x gz"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 1,2 < $? | sed -r "s/$$/ |||/" | gzip > $@

ifeq ($(ALIGNMENTS),yes)
$(DIRSYNTH)/syntheticCorpus2levelplusdetdict.als: $(DIRSYNTH)/syntheticCorpus2levelplusdetdict.nodup
	@echo "Generating final alignments dict+synth t1x+synth t2x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 3 <$? >$@
endif

ifeq ($(ALIGNMENTS),yes)
$(DIRSYNTH)/syntheticCorpus2levelplus1level.all: $(DIRSYNTH)/syntheticCorpus2level.$(SL) $(DIRSYNTH)/syntheticCorpus2level.$(TL) $(DIRSYNTH)/syntheticCorpus2level.als $(DIRSYNTH)/syntheticCorpus.$(SL) $(DIRSYNTH)/syntheticCorpus.$(TL) $(DIRSYNTH)/syntheticCorpus.als
	@echo "Joining synthetic t1x and t2x"
	@echo "----------------------"
	rm -f $(DIRSYNTH)/syntheticCorpus2levelplus1level.all
	python $(MYSCRIPTSDIR)/pastePhraseTable.py $(DIRSYNTH)/syntheticCorpus2level.$(SL) $(DIRSYNTH)/syntheticCorpus2level.$(TL) $(DIRSYNTH)/syntheticCorpus2level.als >> $(DIRSYNTH)/syntheticCorpus2levelplus1level.all
	python $(MYSCRIPTSDIR)/pastePhraseTable.py $(DIRSYNTH)/syntheticCorpus.$(SL) $(DIRSYNTH)/syntheticCorpus.$(TL) $(DIRSYNTH)/syntheticCorpus.als  >> $(DIRSYNTH)/syntheticCorpus2levelplus1level.all
else
$(DIRSYNTH)/syntheticCorpus2levelplus1level.all: $(DIRSYNTH)/syntheticCorpus2level.$(SL) $(DIRSYNTH)/syntheticCorpus2level.$(TL) $(DIRSYNTH)/syntheticCorpus.$(SL) $(DIRSYNTH)/syntheticCorpus.$(TL)
	@echo "Joining synthetic t1x and t2x"
	@echo "----------------------"
	rm -f $(DIRSYNTH)/syntheticCorpus2levelplus1level.all
	python $(MYSCRIPTSDIR)/pastePhraseTable.py $(DIRSYNTH)/syntheticCorpus2level.$(SL) $(DIRSYNTH)/syntheticCorpus2level.$(TL)  >> $(DIRSYNTH)/syntheticCorpus2levelplus1level.all
	python $(MYSCRIPTSDIR)/pastePhraseTable.py $(DIRSYNTH)/syntheticCorpus.$(SL) $(DIRSYNTH)/syntheticCorpus.$(TL)  >> $(DIRSYNTH)/syntheticCorpus2levelplus1level.all
endif

$(DIRSYNTH)/syntheticCorpus2levelplus1level.nodup : $(DIRSYNTH)/syntheticCorpus2levelplus1level.all
	@echo "Removing dups from synthetic t1x and t2x"
	@echo "----------------------"
	cat $? | LC_ALL=C sort -u | python $(MYSCRIPTSDIR)/filterEmptyPhrases.py -f 1,2 > $@

$(DIRSYNTH)/syntheticCorpus2levelplus1level.$(SL): $(DIRSYNTH)/syntheticCorpus2levelplus1level.nodup
	@echo "Generating final source synth t1x+synth t2x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 1 <$? >$@

$(DIRSYNTH)/syntheticCorpus2levelplus1level.$(TL): $(DIRSYNTH)/syntheticCorpus2levelplus1level.nodup
	@echo "Generating final target synth t1x+synth t2x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 2 <$? >$@

ifeq ($(ALIGNMENTS),yes)
$(DIRSYNTH)/syntheticCorpus2levelplus1level.als: $(DIRSYNTH)/syntheticCorpus2levelplus1level.nodup
	@echo "Generating final alignmentssynth t1x+synth t2x"
	@echo "----------------------"
	python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 3 <$? >$@
else
$(FINALALS): $(FINALALIGNERINPUT)
	@echo "Obtaining word alignments of synthetic corpus with already trained model"
	@echo "------------------------------------------------------------------------"
	$(FASTALIGNDIR)/force_align.py $(CORPUSINDEPENDENTDATADIR)/fastalign.fwd_params $(CORPUSINDEPENDENTDATADIR)/fastalign.fwd_err $(CORPUSINDEPENDENTDATADIR)/fastalign.rev_params $(CORPUSINDEPENDENTDATADIR)/fastalign.rev_err  < $(FINALALIGNERINPUT) >$@
endif

$(DIRSYNTH)/moses-model/model/phrase-table.gz: $(FINALFILE) $(FINALALS)
	@echo "Creating final phrase table"
	@echo "------------------------------------------------------------------------"
	mkdir -p $(DIRSYNTH)/moses-model/model
	zcat $(FINALFILE) | paste -d ' ' - $(FINALALS) | LC_ALL=C sort | gzip > $(DIRSYNTH)/moses-model/model/extract.sorted.gz
	cat $(FINALALS) | sed -r "s/([0-9]+)-([0-9]+)/\2-\1/g"  > $(DIRSYNTH)/moses-model/model/alignments.reversed
	zcat $(FINALFILE) | python $(MYSCRIPTSDIR)/cutPhraseTable.py -f 2,1 | sed 's:$$: |||:' | paste -d ' ' - $(DIRSYNTH)/moses-model/model/alignments.reversed | LC_ALL=C sort | gzip > $(DIRSYNTH)/moses-model/model/extract.inv.sorted.gz
	ln -s $(CORPUSINDEPENDENTDATADIR)/moses-model/model/lex.e2f $(DIRSYNTH)/moses-model/model/
	ln -s $(CORPUSINDEPENDENTDATADIR)/moses-model/model/lex.f2e $(DIRSYNTH)/moses-model/model/
	$(MOSESDIR)/scripts/training/train-model.perl --root-dir $(DIRSYNTH)/moses-model --f $(SL) --e $(TL) --alignment grow-diag-final-and --first-step 6 --last-step 6
